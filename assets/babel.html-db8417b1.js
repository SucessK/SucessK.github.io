import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-759e8435.js";const o={},c=e(`<h1 id="babel工具" tabindex="-1"><a class="header-anchor" href="#babel工具" aria-hidden="true">#</a> Babel工具</h1><div class="hint-container info"><p class="hint-container-title">引言</p><p>Babel是一个工具链，主要用于将采用ECMAScript 2015+语法编写的代码转换为向后兼容的 JavaScript语法，以便能够运行在当前和旧版本的浏览器或其他环境中。</p></div><h2 id="结构" tabindex="-1"><a class="header-anchor" href="#结构" aria-hidden="true">#</a> 结构</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// babel.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token punctuation">,</span>
    <span class="token literal-property property">envName</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">passPerPreset</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">targets</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">browserslistConfigFile</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">browserslistEnv</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    <span class="token literal-property property">inputSourceMap</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般主要用到的就是<code>plugins</code>、<code>presets</code>这两个</p><h2 id="功能" tabindex="-1"><a class="header-anchor" href="#功能" aria-hidden="true">#</a> 功能</h2><p><code>Babel</code>提供以下两个功能组成：</p><ul><li>编译<code>ES6+</code>最新语法（<code>let</code>、<code>class</code>、<code>() =&gt; {}</code>等）</li><li>实现旧版本浏览器不支持的<code>ES6+</code>的API（<code>Promise</code>、<code>Symbol</code>、<code>Array.prototype.includes</code>等）</li></ul><h2 id="babel-core" tabindex="-1"><a class="header-anchor" href="#babel-core" aria-hidden="true">#</a> @babel/core</h2><p>它是<code>Babel</code>实现编译的核心。所以我们如果要使用Babel，<code>@babel/core</code>这个包一定是必不可少的。另外我们平常说的<code>Babel 6</code>、<code>Babel 7</code>指的就是@babele/core的版本</p><h2 id="babel-cli" tabindex="-1"><a class="header-anchor" href="#babel-cli" aria-hidden="true">#</a> @babel/cli</h2><blockquote><p>官网解释：<code>Babel</code>自带了一个内置的<code>CLI</code>命令行工具，可通过命令行编译文件</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install --save-dev @babel/core @babel/cli


npx babel index.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="babel-preset-env" tabindex="-1"><a class="header-anchor" href="#babel-preset-env" aria-hidden="true">#</a> @babel/preset-env</h2><blockquote><p>官网解释：<code>@babel/preset-env</code>是一个智能预设，它允许您使用最新的JavaScript，而无需微观管理目标环境需要哪些语法转换（以及可选的浏览器<code>polyfill</code>）。这既让你的生活更轻松，也让JavaScript包更小！</p></blockquote><p><code>@babel/preset-env</code>：</p><ul><li><code>preset</code>预设</li><li><code>env</code>环境</li></ul><h3 id="preset" tabindex="-1"><a class="header-anchor" href="#preset" aria-hidden="true">#</a> preset</h3><p>Babel编译<code>ES6+</code>语法，是通过一个个插件<code>plugin</code>去实现的。每年都会有不同新的提案、新的语法，但我们不可能一个个插件去配置，所以就有了<code>preset</code>这个东西。因此我们可以理解成<code>preset</code>就是一个语法插件集合包，这样我们只用安装这一个包，不需要一个个配插件，就可以很方便的编译最新的语法了。</p><p><code>npm i @babel/preset-env -D</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 修改babel.config.js</span>
<span class="token keyword">const</span> presets <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;@babel/preset-env&#39;</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>presets<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="env" tabindex="-1"><a class="header-anchor" href="#env" aria-hidden="true">#</a> env</h3><p>env指的是环境。因为<code>@babel/preset-env</code>还有一个配置功能，我们可以通过配置我们代码运行的目标环境，来控制<code>polyfill</code>（一个提供低版本浏览器缺失的<code>ES6+</code>新特性的方法与实现的集合 ，后面会有更详细的讲解）的导入跟语法编译，从而使<code>ES6+</code>新的特性可以在我们想要的目标环境中顺利运行。</p><p><strong>总结</strong></p><ul><li>它只编译<code>ES6+</code>语法</li><li>它并不提供<code>polyfill</code>，但是可以通过配置我们代码运行的目标环境，从而控制<code>polyfill</code>的导入跟语法编译，使<code>ES6+</code>的新特性可以在我们想要的目标环境中顺利运行</li></ul><h2 id="polyfill" tabindex="-1"><a class="header-anchor" href="#polyfill" aria-hidden="true">#</a> polyfill</h2><h3 id="功能-1" tabindex="-1"><a class="header-anchor" href="#功能-1" aria-hidden="true">#</a> 功能</h3><p><code>ES6+</code>除了提供很多简洁的语法（<code>let、class、() =&gt; {}</code>等）外，还为我们提供了很多便捷的API（<code>Promise、Symbol、Array.prototype.includes</code>等）。但旧版本浏览器是不支持这些API的，而<code>polyfill</code>存放了这些API的方法与实现，所以它可以使得这些不支持的浏览器，支持这些API。 理解 我们可以把所有这种存放了<code>ES6+ API</code>的方法与实现的集合叫做<code>polyfill</code>，也就是我们经常说的<code>垫片</code>。（如果把我们的旧版本浏览器缺失的API当做一个个坑，<code>polyfill</code>就是用来把这些坑填平） <code>polyfill</code>也分很多种，像core-js是会提供旧版本浏览器缺失的所有的API；还有一些只提供缺失API的某块，例如 <code>promise-polyfill</code>、<code>proxy-polyfill</code> 等。 <code>Babel</code>配置<code>polyfill</code>的过程，就是实现旧版本浏览器对这些API支持的过程。</p><h2 id="babel-polyfill" tabindex="-1"><a class="header-anchor" href="#babel-polyfill" aria-hidden="true">#</a> @babel/polyfill</h2><blockquote><p>从<code>Babel 7.4.0</code>开始，这个包已经被弃用，转而直接包含<code>core-js/stable</code>（用于polyfill ECMAScript功能）</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>import &quot;core-js/stable&quot;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个包由<code>core-js</code>（版本为<code>2.x.x</code>）与<code>regenerator-runtime</code>两个包组成 这个包在<code>Babel 7.4.0</code>以后就废弃了，所以在<code>Babel 7.4.0</code>以后，我们想让一些不支持<code>ES6+</code> API的旧版本浏览器支持这些<code>API</code>，应该直接安装<code>core-js@3.x.x</code>的包（不要安装<code>2.x.x</code>的版本，已经不维护了，目前最新版本为<code>3.x.x</code>；并且只有<code>3.x.x</code>的版本才有<code>stable</code>这个文件夹）</p><h2 id="core-js" tabindex="-1"><a class="header-anchor" href="#core-js" aria-hidden="true">#</a> core-js</h2><p><strong>概述</strong></p><p>通过上面<code>polyfill</code>、<code>@babel/polyfill</code>两个模块，我们可以知道它是一个垫片，它会提供旧版本浏览器缺失的所有的API，如果我们想要在旧浏览器用到<code>ES6+</code> API时，我们直接安装<code>core-js@3.x.x</code>这个包。</p><p>通过 官方的介绍，我们可以知道：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&#39;@babel/polyfill&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>等同于</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// core-js必须是3.x.x版本，因为2.x.x版本，不包含stable文件夹</span>
<span class="token keyword">import</span> <span class="token string">&quot;core-js/stable&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&quot;regenerator-runtime/runtime&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Babel &gt;= 7.18.0等同于</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// core-js必须是3.x.x版本，因为2.x.x版本，不包含stable文件夹</span>
<span class="token comment">// Babel &gt;= 7.18.0后 不需要再 import &quot;regenerator-runtime/runtime&quot;;</span>
<span class="token keyword">import</span> <span class="token string">&quot;core-js/stable&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们要把<code>async function() {}</code>等异步函数，或者<code>fuction* myGenerator() {}</code>这种<code>Generator</code>函数编译成<code>ES5</code>，并且<code>@babel/core</code>或<code>@babel/plugin-transform-regenerator</code>小于<code>7.18.0</code>，我们就需要手动<code>import &quot;regenerator-runtime/runtime&quot;</code>这个包。</p><p>在<code>Babel &gt;= 7.18.0</code>以后，我们直接<code>import &quot;core-js/stable&quot;</code>;</p><h2 id="babel-runtime" tabindex="-1"><a class="header-anchor" href="#babel-runtime" aria-hidden="true">#</a> @babel/runtime</h2><blockquote><p>官方解释：<code>@babel/runtime</code>是一个包含<code>Babel</code>模块化运行时助手的库</p></blockquote><p>在Babel编译的时候，会有一些辅助函数，这些函数就是<code>ES6+</code>一些语法糖的实现</p><p>它是Babel编译后的代码。我们会发现，编译以后生成很多函数，并且会以<code>内联</code>的方式插入到我们的代码中，这些函数就是我们说的<code>辅助函数</code>。它是<code>@babel/runtime</code>的内容，它在<code>node_modules/@babel/runtime/helpers</code>。 我们最后来看看白色框，会发现Babel编译后的辅助函数，都可以在<code>@babel/runtime</code>里面找到。 所以<code>@babel/runtime</code>是存放了Babel辅助函数的一个集合包。</p><h2 id="babel-plugin-transform-runtime" tabindex="-1"><a class="header-anchor" href="#babel-plugin-transform-runtime" aria-hidden="true">#</a> @babel/plugin-transform-runtime</h2><blockquote><p>官方解释：一个插件，可以重用<code>Babel</code>注入的帮助程序代码以节省代码大小</p></blockquote><p>通过上面<code>@babel/runtime</code>模块的了解，我们知道当我们使用了一些<code>ES6+</code>的语法糖时，Babel会生成一些辅助函数来编译这些语法糖，并以内联的方式插入到代码中。 那如果我们有10个文件都用到了语法糖，那这些辅助函数，是不是会生成10次，并内联插入10次呢？我们用这个案例 <code>no-use-transform-runtime</code> 来感受一下。 我们定义了三个文件，每个文件都用了<code>class</code>这个语法糖。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// babel.config.js 配置文件</span>
<span class="token keyword">const</span> presets <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;@babel/preset-env&#39;</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>presets<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Animal.js 文件</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Country.js 文件</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Country</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// index.js 文件</span>
<span class="token keyword">import</span> Animal <span class="token keyword">from</span> <span class="token string">&quot;./class/Animal&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Country <span class="token keyword">from</span> <span class="token string">&quot;./class/Country&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> lMC <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> usa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Country</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看看红色的框框，我们会发现实现的方法都是一样的，所以在每个使用到<code>class</code>语法糖的文件中，辅助函数都被生成并插入了一次，这些基本重复的代码，无疑是会大大增加我们的打包体积的。</p><p>为了解决上述的弊端，我们就得使用<code>@babel/plugin-transform-runtime</code>插件。从<code>@babel/runtime</code>模块我们知道，它里面存放了Babel辅助函数的集合，<code>@babel/plugin-transform-runtime</code>会将我们用到的辅助函数，从<code>@babel/runtime</code>中以<code>require</code>或者<code>import</code>的方式，引入到我们的文件中，实现复用，从而减小我们最终输出包的体积。 所以<code>@babel/runtime</code>跟<code>@babel/plugin-transform-runtime</code>两者通常是配合一起使用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// babel.config.js 配置文件</span>
<span class="token comment">// 增加了@babel/plugin-transform-runtime 配置</span>
<span class="token keyword">const</span> plugins <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;@babel/plugin-transform-runtime&#39;</span>
<span class="token punctuation">]</span>
<span class="token keyword">const</span> presets <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;@babel/preset-env&#39;</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>plugins<span class="token punctuation">,</span> presets<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Animal.js 文件</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Country.js 文件</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Country</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// index.js 文件</span>
<span class="token keyword">import</span> Animal <span class="token keyword">from</span> <span class="token string">&quot;./class/Animal&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Country <span class="token keyword">from</span> <span class="token string">&quot;./class/Country&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> lMC <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> usa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Country</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们会发现：</p><ul><li>辅助函数会以require引用的方式加到我们的代码中</li><li>打包后，辅助函数只用了一次，而且不是插入三次，很好的实现了复用</li><li>打包出来的体积也变成了3KB，很好的缩小了最后包的体积</li></ul>`,56),t=[c];function p(l,i){return s(),a("div",null,t)}const u=n(o,[["render",p],["__file","babel.html.vue"]]);export{u as default};
