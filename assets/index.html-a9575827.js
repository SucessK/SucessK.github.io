import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-d9118190.js";const t={},o=e(`<h1 id="js正则表达式" tabindex="-1"><a class="header-anchor" href="#js正则表达式" aria-hidden="true">#</a> JS正则表达式</h1><h2 id="常用元字符和特殊字符" tabindex="-1"><a class="header-anchor" href="#常用元字符和特殊字符" aria-hidden="true">#</a> 常用元字符和特殊字符</h2><ul><li><code>.</code>：匹配除换行符以外的任意字符。</li><li><code>^</code>：匹配字符串的开头。</li><li><code>$</code>：匹配字符串的结尾。</li><li><code>*</code>：匹配前面的表达式零次或多次。</li><li><code>+</code>：匹配前面的表达式一次或多次。</li><li><code>?</code>：匹配前面的表达式零次或一次。</li><li><code>|</code>：用于分隔多个模式，匹配其中任意一个。</li><li><code>[]</code>：用于定义字符集，匹配其中任意一个字符。</li><li><code>()</code>：用于分组，可以改变操作符的优先级，也可以捕获匹配的文本。</li><li><code>\\</code>：用于转义特殊字符，或表示特殊序列。</li><li><code>{}</code>：用于指定匹配的次数。</li><li><code>\\b</code>：匹配单词的边界。</li><li><code>\\B</code>：匹配非单词边界。</li><li><code>\\d</code>：匹配数字字符。</li><li><code>\\D</code>：匹配非数字字符。</li><li><code>\\w</code>：匹配单词字符（字母、数字、下划线）。</li><li><code>\\W</code>：匹配非单词字符。</li><li><code>\\s</code>：匹配空白字符（空格、制表符、换行符等）。</li><li><code>\\S</code>：匹配非空白字符。</li><li><code>\\n</code>：匹配换行符。</li><li><code>\\t</code>：匹配制表符。</li><li><code>\\r</code>：匹配回车符。</li><li><code>\\f</code>：匹配换页符。</li><li><code>\\v</code>：匹配垂直制表符。</li></ul><h2 id="贪婪模式和非贪婪模式" tabindex="-1"><a class="header-anchor" href="#贪婪模式和非贪婪模式" aria-hidden="true">#</a> 贪婪模式和非贪婪模式</h2><p>正则表达式默认使用贪婪模式，即尽可能多地匹配字符。例如，<code>.*</code>将匹配任意数量的字符。而非贪婪模式则相反，尽可能少地匹配字符。在贪婪模式后加上<code>?</code>可以将其转换为非贪婪模式。例如，<code>.*?</code>将匹配尽可能少的字符。</p><h2 id="标志" tabindex="-1"><a class="header-anchor" href="#标志" aria-hidden="true">#</a> 标志</h2><p>正则表达式可以使用标志来修改其行为。以下是一些常用的标志：</p><ul><li><code>g</code>：全局匹配，找到所有匹配而不是在第一个匹配后停止。</li><li><code>i</code>：忽略大小写匹配。</li><li><code>m</code>：多行匹配，使^和$匹配每行的开头和结尾。</li></ul><p>标志可以单独使用，也可以组合使用，例如gi表示全局匹配且忽略大小写。</p><blockquote><p>正则表达式/pattern/g可以全局匹配字符串中的所有pattern。</p></blockquote><h2 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法" aria-hidden="true">#</a> 常用方法</h2><blockquote><p>JavaScript提供了一些内置方法来处理正则表达式：</p></blockquote><h3 id="test" tabindex="-1"><a class="header-anchor" href="#test" aria-hidden="true">#</a> test</h3><blockquote><p>测试字符串是否与正则表达式匹配，返回布尔值。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 例如，我们可以使用以下代码测试一个字符串是否以字母a开头：</span>

<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello, world!&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">world</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="exec" tabindex="-1"><a class="header-anchor" href="#exec" aria-hidden="true">#</a> exec</h3><blockquote><p>exec方法用于在一个字符串中查找匹配的文本，并返回一个包含该文本的数组。如果没有找到匹配的文本，返回null。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 例如，我们可以使用以下代码查找一个字符串中的第一个数字：</span>

<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello, world!&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">world</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;world&quot;, index: 7, input: &quot;Hello, world!&quot;, groups: undefined]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="match" tabindex="-1"><a class="header-anchor" href="#match" aria-hidden="true">#</a> match</h3><blockquote><p>在一个字符串中查找与正则表达式匹配的子串，并返回一个数组，其中包含匹配的结果。如果没有匹配，则返回null。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 例如，我们可以使用以下代码查找一个字符串中的所有数字：</span>

<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello, world!&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">world</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;world&quot;, index: 7, input: &quot;Hello, world!&quot;, groups: undefined]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="search" tabindex="-1"><a class="header-anchor" href="#search" aria-hidden="true">#</a> search</h3><blockquote><p>在一个字符串中查找与正则表达式匹配的子串，并返回匹配的位置。如果没有匹配，则返回<code>-1</code></p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello, world!&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">world</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="replace" tabindex="-1"><a class="header-anchor" href="#replace" aria-hidden="true">#</a> replace</h3><blockquote><p>在一个字符串中查找与正则表达式匹配的子串，并将其替换为指定的字符串。它返回一个新的字符串，原字符串不会被修改</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello, world!&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">world</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token string">&#39;JavaScript&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Hello, JavaScript!&quot;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="split" tabindex="-1"><a class="header-anchor" href="#split" aria-hidden="true">#</a> split</h3><blockquote><p>将字符串分割为数组，使用正则表达式作为分隔符。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;Hello, world!&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">,\\s*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;Hello&quot;, &quot;world!&quot;]</span>



</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30),c=[o];function l(p,i){return s(),a("div",null,c)}const u=n(t,[["render",l],["__file","index.html.vue"]]);export{u as default};
